;=====------======------=====------======------=====------======------======------======------=====------======------=====------======------
;=====------======------=====------======------=====------======-------KEYS-------======------=====------======------=====------======------
;=====------======------=====------======------=====------======------======------======------=====------======------=====------======------

ButtonsLabel:
keysArray=keyLock|keyplay|keyprev|keynext|keyVolUp|keyVolDown|keyRSWeb

Loop, Parse, keysArray, `|
	If (assigned%A_LoopField%="" || assigned%A_LoopField%="None" || assigned%A_LoopField%="ERROR")
		assigned%A_LoopField%=None

#If !WinActive( "ahk_id " . ChangeHotkeys ) && !WinActive( "ahk_id " . ProtectionSettings )
	Hotkey, If, !WinActive( "ahk_id " . ChangeHotkeys ) && !WinActive( "ahk_id " . ProtectionSettings )
	If (assignedKeyLock!="None" && BreakLoop=1)
	{
		Hotkey, %assignedKeyLock%, LockNow
		Hotkey, %assignedKeyLock%, LockNow, On
	}
	If (assignedKeyRSWeb!="None")
	{
		Hotkey, %assignedKeyRSWeb%, RSWeb
		Hotkey, %assignedKeyRSWeb%, RSWeb, On
		Loop, 8
		{
			Hotkey, % assignedKeyRSWeb . " & " . A_index, ws%A_Index%
			Hotkey, % assignedKeyRSWeb . " & " . A_index, ws%A_Index%, On
		}
	}
	If (assignedKeyPlay!="None")
	{
		Hotkey, %assignedKeyPlay%, playpause
		Hotkey, %assignedKeyPlay%, playpause, On
	}
	If (assignedKeyPrev!="None")
	{
		Hotkey, %assignedKeyPrev%, PrevSong
		Hotkey, %assignedKeyPrev%, PrevSong, On
	}
	If (assignedKeyNext!="None")
	{
		Hotkey, %assignedKeyNext%, NextSong
		Hotkey, %assignedKeyNext%, NextSong, On
	}
	If (assignedKeyVolUp!="None")
	{
		Hotkey, %assignedKeyVolUp%, VolumeIncrease
		Hotkey, %assignedKeyVolUp%, VolumeIncrease, On
	}
	If (assignedKeyVolDown!="None")
	{
		Hotkey, %assignedKeyVolDown%, VolumeDecrease
		Hotkey, %assignedKeyVolDown%, VolumeDecrease, On
	}
return

#If (ItsLocked!=1) && !WinActive("ahk_class AutoHotkeyGUI") && !WinActive("ahk_class Windows.UI.Core.CoreWindow") && (AltMinimizeWanted=1) && !isWindowFullScreen("A")
~$LAlt Up::
	GetKeyState, state, Shift
	If state=D
	{
		Send {LAlt Down}{LShift Up}{LAlt Up}
		return
	}
	KeyWait, LAlt, U
	KeyWait, LAlt, D, T0.2
	If (ErrorLevel = 0) && A_PriorKey = "LAlt"
		If !WinActive("ahk_class WorkerW")
			WinMinimize, A
return
#If

~CapsLock::RapidHotkey("email", 2, 0.2, 1)
email:
	SendInput {Raw}%email%
return

#If password
#CapsLock::RapidHotkey("pw", 2, 0.2, 1)
pw:
	If !Authorized
	{
		WinGet, activeWindowForPassword, ID, A
		GoSub Authorization
		return
	}
	SendInput {Raw}%password%
return
#If

#If (!A_IsCompiled)
~!SC013::
	IntentReload:=true
	Reload
return
#If

#If (A_IsCompiled)
~#!SC013::
	IntentReload:=true
	Reload
return
#If

~#!SC017::
	GoSub OpenLearnMoreTabAbout
return
~#!SC01F:: ; Win+Alt+S Suspends the script
	Suspend, Permit
	GoSub SuspendScriptToggle
return

#If (ItsLocked = 1)
	RButton::Return
	Space::Return
	LAlt::Return
	RAlt::Return
	F1::
		GoSub fadeinclock
		SetTimer, MinuteUpdate, 15000
	return
	CapsLock::Return
	LCtrl::Return
	RCtrl::Return
	Esc::Return
	Pause::Return
	LWin::return
	RWin::Return
	!F4::Return
	!SC013::Return ; Win+R
	#SC020::Return ; Win+ D
	!Tab::Return
	NumpadSub:: ; Initiates developer lock if the username is riyusso and its not locked by the developer yet.
	Suspend, Permit
	IniRead, username, settings.ini, settings, username
	if (username="Riyusso" && !devlock)
	{
		pwcover=
		Formula=0
		GuiControl, ProtectionAgainstZombies:Hide, LTxt
		GuiControl, ProtectionAgainstZombies:Show, TATxt
		GuiControl,  ProtectionAgainstZombies:, TATxt, Developer Lock.
		devlock:=True
	}
	return
	NumPad1::
	Suspend, Permit
	GoSub plus1
	return
	NumPad2::
	Suspend, Permit
	GoSub plus2
	return
	NumPad3::
	Suspend, Permit
	GoSub plus3
	return
	NumPad4::
	Suspend, Permit
	GoSub plus4
	return
	NumPad5::
	Suspend, Permit
	GoSub plus5
	return
	NumPad6::
	Suspend, Permit
	GoSub plus6
	return
	NumPad7::
	Suspend, Permit
	GoSub plus7
	return
	NumPad8::
	Suspend, Permit
	GoSub plus8
	return
	NumPad9::
	Suspend, Permit
	GoSub plus9
	return
	NumPad0::
	Suspend, Permit
	GoSub plus0
	return
	Delete::
	Suspend, Permit
	GoSub FormulaNull
	return
	NumpadDot::
	Suspend, Permit
	GoSub FormulaNull
	return
	~Enter::
	~NumpadEnter::
	If !Disablekeys
	{
		Suspend, Permit
		GoSub TryPw
	}
	return
	SC00E::
	Suspend, Permit
	GoSub FormulaNull
	return
#If

#If (VolumeTR=1)
WheelUp::
	GoSub VolumeIncrease
return
WheelDown::
	GoSub VolumeDecrease
return
#If

#If (ItsLocked!=1) && (ChoosingWebsite=1) && !WinActive("ahk_id" . WebL) && !WinActive("ahk_id" . WebEdit)
1::
GoSub ws1
return
2::
GoSub ws2
return
3::
GoSub ws3
return
4::
GoSub ws4
return
5::
GoSub ws5
return
6::
GoSub ws6
return
7::
GoSub ws7
return
8::
GoSub ws8
return
~LButton Up::
	MouseGetPos, , , id, control
	if (id!=WebL && id!=WebEdit)
		GoSub WebLGuiEscape
return
SC029:: 	; While RSWeb is opened, press the ` key to focus the search bar.
WinActivate, ahk_id %WebL%
return
Esc::
	GoSub WebLGuiEscape
return
#If

#If WinActive("ahk_id" . WebL) && (SearchBased)
Tab::
return
~Space::
	If IsUsingCustomQuery
		return
		
	sleep 10
	Gui, WebL:Submit, NoHide
	Loop, Parse, customQueries, |
	{
		if SubStr(webSearchVar, 1, StrLen(A_LoopField)+1)=A_LoopField . " "
		{
			currentKeyword:=A_LoopField
			url = % %A_LoopField%url
			webSearchVar:=StrReplace(webSearchVar, A_LoopField . " ", "")
			SetSearchLabelText(%A_LoopField%Label, currentKeyword, webSearchVar, guiw)
			IsUsingCustomQuery:=true
			return
		}
	}
return
~SC034::
	If !DotTipDisplayed && !IsUsingCustomQuery && GoogleTipDisplayed<2
	{
		Tip := new Tip()
		Tip.message:="Tip: You can type 'g ' at the beginning to search directly in Google.com"
		Tip.width:=RSWebGuiWidth-9
		WinGetPos,, pos,,A
		Tip.ypos:=pos-40
		Tip.Show()
		GoogleTipDisplayed++
		IniWrite, %GoogleTipDisplayed%, settings.ini, settings, GoogleTipDisplayed
		DotTipDisplayed:=true
	}
return
~*SC00E::
	Gui, WebL:Submit, NoHide
	If !webSearchVar
	{
		GuiControl, WebL:Move, webSearchVar, % "x14 w" guiw-85
		GuiControl, WebL:Hide, SearchLabel
		IsUsingCustomQuery:=false
		currentKeyword=
	}
return
$SC00E::
	Gui, WebL:Submit, NoHide
	webSearchVarSave:=webSearchVar
	Send {BS}
	Gui, WebL:Submit, NoHide
	if (webSearchVarSave)=(webSearchVar)
	{
		GuiControl, WebL:Move, webSearchVar, % "x14 w" guiw-85
		GuiControl, WebL:Hide, SearchLabel
		IsUsingCustomQuery:=false
		currentKeyword=
	}
return
*Up::
	webSearchVar:=previousSearch
	GuiControl, WebL:, webSearchVar, %webSearchVar%
	Send {End}
return
~F1::
	GoSub WebLClose
	RSNotify("Opening Functions")
	Sleep 500
	OpenWithEditor(A_MyDocuments "/Devers/Libraries/Functions.lib")
return
#If

#If (ItsLocked!=1) && (FastSearchWanted=1)
RAlt::
LCtrl & RAlt::
	SearchBased:=true
	GoSub RSWeb
return
#If

#If WinExist("ahk_id" . BalloonTip)
~LButton::
	IfWinExist, ahk_id %BalloonTip%
		Gui, %BalloonTip%:Destroy
return
#If

#If WinExist("ahk_class AutoHotkeyGUI") && !WinActive("ahk_id" . ChangeHotkeys) && !WinActive("ahk_id" . Auth) && !WinActive("ahk_id" . WebL) ; fixes gui freeze when pressing Alt
~LAlt Up::
return
#If

#If (DefaultFader)
~LButton::
	Suspend, Permit
	MouseGetPos, , , id, control
	WinGetClass, class, ahk_id %id%
	if (class!="AutoHotkeyGUI" && class!="#32769")
		GoSub ExitDefMenu
return
~RButton Up::
	Suspend, Permit
	MouseGetPos, , , id, control
	WinGetClass, class, ahk_id %id%
	if (class!="AutoHotkeyGUI")
		GoSub ExitDefMenu
return
#If

#If (MediaOverTrayWanted=1) && (MouseIsOver("ahk_class Shell_TrayWnd") || MouseIsOver("ahk_class Progman"))
Hotkey, If, (MediaOverTrayWanted=1) && (MouseIsOver("ahk_class Shell_TrayWnd") || MouseIsOver("ahk_class Progman"))
	MButton::
		MouseGetPos, xbef
	return

	MButton Up::
		MouseGetPos, xaft
		if(xbef!=null && xbef-xaft>60)
		{
			Send {Media_Prev}
			RSNotify("Previous")
		}
		else if(xbef!=null && xbef-xaft<-60)
		{
			Send {Media_Next}
			RSNotify("Next", 95)
		}
		else if(xbef!=null)
		{
			Send {Media_Play_Pause}
			Sleep 40
			RSNotify("Play/Pause")
		}
		xbef:=null
	return
#If

#If (MoveUpFolderWanted=1) && (MouseIsOver("ahk_class CabinetWClass") || MouseIsOver("ahk_class #32770"))
	MButton::
		Send !{Up}
	return
#If